    <link rel="stylesheet" href="/css/EditNutritionTargetsDaily.css" />
    @model SEP490_G87_Vita_Nutrient_System_Client.Models.NutritionTargetOfMeal

    <div class="container">
        <h2>Mục tiêu dinh dưỡng</h2>

        <form asp-action="EditNutritionTargetsDaily" method="post">
            <input asp-for="ExerciseIntensityId" type="hidden" />
            <input asp-for="NutritionTargetsDailyId" type="hidden" />
            <!-- Title -->
            <div class="form-group">
                <label asp-for="Title">Title</label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <!-- Calories -->
            <div class="form-group calories-comparison">
                <label>Calories</label>
                <div class="calories-display">
                    <!-- Ô nhập cho Calo của MealSettingsDetail -->
                    <input asp-for="Calories" class="form-control d-inline-block calories-input" style="width: 80px;" id="caloriesInput" value="@Model.Calories" min="2" />

                    <!-- Biểu tượng cảnh báo nếu có sự chênh lệch giữa Model.Calories và ViewBag.Calories -->
                    @if (Model.Calories != ViewBag.Calories)
                    {
                        <span class="warning-icon" title="Calories không khớp!">⚠️</span>
                    }

                    <!-- Calo của NutritionTargetsDaily hiển thị dưới dạng văn bản -->
                    <span class="calories-value">/ @ViewBag.Calories</span>
                </div>
                <span class="text-danger"></span>
            </div>



            <!-- Target Macros -->
            <h4>Mục tiêu Macro</h4>
            <div class="form-group">
                <label>Tính toán macro</label>
            </div>

            <!-- Carbs -->
            <div class="form-group">
                <label>
                    <span style="color: #f1c40f; font-size: 16px;">•</span> Carbs (g)
                </label>
                <div class="carbs-values">
                    <!-- Ô nhập cho giá trị Min và Max của Carbs -->
                    <input type="number" class="carbs-input-min" min="0" max="@ViewBag.CarbsMax" value="@Model.CarbsMin" name="CarbsMin" placeholder="Min" />
                <span class="to-text">Đến</span>
                    <input type="number" class="carbs-input-max" min="0" max="@ViewBag.CarbsMax" value="@Model.CarbsMax" name="CarbsMax" placeholder="Max" />
                    <span class="carbs-max-viewbag">(0 - @ViewBag.CarbsMax)</span>
                </div>
            </div>

            <!-- Fats -->
            <div class="form-group">
                <label>
                    <span style="color: #00b3b3; font-size: 16px;">•</span> Fats (g)
                </label>
                <div class="fats-values">
                    <!-- Ô nhập cho giá trị Min và Max của Fats -->
                    <input type="number" class="fats-input-min" min="0" max="@ViewBag.FatsMax" value="@Model.FatsMin" name="FatsMin" placeholder="Min" />
                <span class="to-text">Đến</span>
                    <input type="number" class="fats-input-max" min="0" max="@ViewBag.FatsMax" value="@Model.FatsMax" name="FatsMax" placeholder="Max" />
                    <span class="fats-max-viewbag">(0 - @ViewBag.FatsMax)</span>
                </div>
            </div>

            <!-- Protein -->
            <div class="form-group">
                <label>
                    <span style="color: #800080; font-size: 16px;">•</span> Protein (g)
                </label>
                <div class="protein-values">
                    <!-- Ô nhập cho giá trị Min và Max của Protein -->
                    <input type="number" class="protein-input-min" min="0" max="@ViewBag.ProteinMax" value="@Model.ProteinMin" name="ProteinMin" placeholder="Min" />
                    <span class="to-text">Đến</span>
                    <input type="number" class="protein-input-max" min="0" max="@ViewBag.ProteinMax" value="@Model.ProteinMax" name="ProteinMax" placeholder="Max" />
                    <span class="protein-max-viewbag">(0 - @ViewBag.ProteinMax)</span>
                </div>
            </div>

            <!-- Micronutrients -->
            <h4>Vi chất dinh dưỡng</h4>

            <div class="form-group">
                <label asp-for="MinimumFiber">Chất xơ tối thiểu (g)</label>
                <!-- Đổi span thành input để cho phép cập nhật qua JavaScript -->
                <input asp-for="MinimumFiber" type="number" class="form-control fiber-min-input" />
                <span asp-validation-for="MinimumFiber" class="text-danger"></span>
            </div>

        <h4>Loại trừ thực phẩm</h4>
        <div class="form-group">
            <label for="ingredient-selector">Chọn thực phẩm muốn loại trừ</label>
            <div class="ingredient-selector-container">
                <select id="ingredient-selector" class="form-control">
                    <option value="">Chọn thực phẩm</option>
                    @if (ViewBag.Ingredients != null)
                    {
                        foreach (var ingredient in ViewBag.Ingredients)
                        {
                            <option value="@ingredient.Id">@ingredient.Name</option>
                        }
                    }
                </select>
                <button type="button" id="add-ingredient-button" class="btn btn-secondary">Thêm vào</button>
            </div>

            <!-- Danh sách thực phẩm đã chọn -->
            <div id="excluded-ingredients-list" class="excluded-list">
                @if (ViewBag.SelectedIngredients != null)
                {
                    foreach (var ingredient in ViewBag.SelectedIngredients)
                    {
                        <div class="excluded-item" data-id="@ingredient.Id">
                            @ingredient.Name
                            <button type="button" class="remove-ingredient-button">❌</button>
                        </div>
                    }
                }
            </div>

            <!-- Giá trị AvoidIngredient -->
            <input type="hidden" id="avoid-ingredient" name="AvoidIngredient" value="@Model.AvoidIngredient" />
        </div>



            <!-- Limit Daily Sodium -->
            <div class="checkbox-group">
                <label for="limitDailySodium">Hạn chế lượng natri hàng ngày</label>
                <div class="toggle-switch">
                    <input type="checkbox" id="limitDailySodium" name="LimitDailySodium" class="toggle-input"
                           value="true" @(Model.LimitDailySodium ? "checked" : "") />
                    <label for="limitDailySodium" class="toggle-label"></label>
                </div>
            </div>

            <!-- Limit Daily Cholesterol -->
            <div class="checkbox-group">
                <label for="limitDailyCholesterol">Hạn chế Cholesterol hàng ngày</label>
                <div class="toggle-switch">
                    <input type="checkbox" id="limitDailyCholesterol" name="LimitDailyCholesterol" class="toggle-input"
                           value="true" @(Model.LimitDailyCholesterol ? "checked" : "") />
                    <label for="limitDailyCholesterol" class="toggle-label"></label>
                </div>
            </div>



            <div class="form-group">
                <label for="DietTypeIdWant">Chế độ ăn uống chính</label>
                <select asp-for="FoodTypeIdWant" class="form-control" asp-items="@(new SelectList(ViewBag.DietTypes, "DietTypeId", "Name", Model.FoodTypeIdWant))">
                </select>
            </div>
            
            <input asp-for="ViewBagCarbsMax" type="hidden" value="@ViewBag.CarbsMax" />
            <input asp-for="ViewBagFatsMax" type="hidden" value="@ViewBag.FatsMax" />
            <input asp-for="ViewBagProteinMax" type="hidden" value="@ViewBag.ProteinMax" />
            <!-- Save Button -->
            <div class="form-group mt-4">
                <button type="submit" class="btn btn-primary">Lưu</button>
                <a href="@Url.Action("MealSettingsDetailToList", "Meal")" class="btn btn-secondary">Hủy</a>
            </div>
        </form>
    </div>

    <script>
    document.addEventListener("DOMContentLoaded", function () {
        const caloriesInput = document.querySelector('.calories-input');
        const carbsMinInput = document.querySelector('.carbs-input-min');
        const carbsMaxInput = document.querySelector('.carbs-input-max');
        const fatsMinInput = document.querySelector('.fats-input-min');
        const fatsMaxInput = document.querySelector('.fats-input-max');
        const proteinMinInput = document.querySelector('.protein-input-min');
        const proteinMaxInput = document.querySelector('.protein-input-max');
        const fiberMinInput = document.querySelector('.fiber-min-input');

        // Lấy các phần tử hiển thị Max của ViewBag
        const carbsMaxSpan = document.querySelector('.carbs-max-viewbag');
        const fatsMaxSpan = document.querySelector('.fats-max-viewbag');
        const proteinMaxSpan = document.querySelector('.protein-max-viewbag');

        let initialCalories = parseInt(caloriesInput.value);
        let isAutoUpdate = false; // Cờ xác định đang tự động cập nhật

        caloriesInput.addEventListener('focus', function () {
            initialCalories = parseInt(caloriesInput.value);
        });

        caloriesInput.addEventListener('blur', function () {
            const calories = parseInt(caloriesInput.value);

            if (isNaN(calories) || calories < 2) {
                alert("Calories phải lớn hơn hoặc bằng 2.");
                caloriesInput.value = initialCalories;
                return;
            }

            let carbsMax = Math.round(calories / 4);
            let fatsMax = Math.round(calories / 9);
            let proteinMax = Math.round(calories / 4);
            let fiberMin = Math.round((calories / 1000) * 14);

            isAutoUpdate = true; // Đánh dấu đang tự động cập nhật

            carbsMaxInput.value = Math.min(carbsMax, carbsMaxInput.value);
            fatsMaxInput.value = Math.min(fatsMax, fatsMaxInput.value);
            proteinMaxInput.value = Math.min(proteinMax, proteinMaxInput.value);

            carbsMaxInput.setAttribute('max', carbsMax);
            fatsMaxInput.setAttribute('max', fatsMax);
            proteinMaxInput.setAttribute('max', proteinMax);

            carbsMaxSpan.textContent = `(0 - ${carbsMax})`;
            fatsMaxSpan.textContent = `(0 - ${fatsMax})`;
            proteinMaxSpan.textContent = `(0 - ${proteinMax})`;
            fiberMinInput.value = fiberMin;

            validateMinMax(carbsMinInput, carbsMaxInput, carbsMax);
            validateMinMax(fatsMinInput, fatsMaxInput, fatsMax);
            validateMinMax(proteinMinInput, proteinMaxInput, proteinMax);

            const hiddenCarbsMaxInput = document.querySelector('[name="ViewBagCarbsMax"]');
            const hiddenFatsMaxInput = document.querySelector('[name="ViewBagFatsMax"]');
            const hiddenProteinMaxInput = document.querySelector('[name="ViewBagProteinMax"]');

            // Cập nhật giá trị
            hiddenCarbsMaxInput.value = carbsMax;
            hiddenFatsMaxInput.value = fatsMax;
            hiddenProteinMaxInput.value = proteinMax;

            // Kiểm tra giá trị
            console.log("Carbs Max Hidden Input Updated:", hiddenCarbsMaxInput.value);
            console.log("Fats Max Hidden Input Updated:", hiddenFatsMaxInput.value);
            console.log("Protein Max Hidden Input Updated:", hiddenProteinMaxInput.value);

            isAutoUpdate = false; // Hoàn tất tự động cập nhật
        });

        function validateMinMax(minInput, maxInput, maxAllowed) {
            const minValue = parseFloat(minInput.value);
            const maxValue = parseFloat(maxInput.value);

            if (!isAutoUpdate) { // Chỉ hiện thông báo khi không phải cập nhật tự động
                if (minValue > maxValue) {
                    alert("Giá trị Min không thể lớn hơn Max.");
                    minInput.value = maxValue;
                }
                if (maxValue > maxAllowed) {
                    alert(`Giá trị Max không được vượt quá ${maxAllowed}.`);
                    maxInput.value = maxAllowed;
                }
                if (minValue < 0) {
                    alert("Giá trị Min không thể nhỏ hơn 0.");
                    minInput.value = 0;
                }
            } else { // Khi tự động cập nhật, chỉ sửa giá trị mà không hiện thông báo
                if (maxValue > maxAllowed) {
                    maxInput.value = maxAllowed;
                }
                if (minValue > maxInput.value) {
                    minInput.value = maxInput.value;
                }
                if (minValue < 0) {
                    minInput.value = 0;
                }
            }
        }

        // Gắn sự kiện cho các trường Min và Max
        carbsMinInput.addEventListener('change', function () {
            validateMinMax(carbsMinInput, carbsMaxInput, carbsMaxInput.getAttribute('max'));
        });
        carbsMaxInput.addEventListener('change', function () {
            validateMinMax(carbsMinInput, carbsMaxInput, carbsMaxInput.getAttribute('max'));
        });
        fatsMinInput.addEventListener('change', function () {
            validateMinMax(fatsMinInput, fatsMaxInput, fatsMaxInput.getAttribute('max'));
        });
        fatsMaxInput.addEventListener('change', function () {
            validateMinMax(fatsMinInput, fatsMaxInput, fatsMaxInput.getAttribute('max'));
        });
        proteinMinInput.addEventListener('change', function () {
            validateMinMax(proteinMinInput, proteinMaxInput, proteinMaxInput.getAttribute('max'));
        });
        proteinMaxInput.addEventListener('change', function () {
            validateMinMax(proteinMinInput, proteinMaxInput, proteinMaxInput.getAttribute('max'));
        });
    });

    </script>

    <script>

    document.addEventListener("DOMContentLoaded", function () {
        const ingredientSelector = document.getElementById('ingredient-selector');
        const addIngredientButton = document.getElementById('add-ingredient-button');
        const excludedIngredientsList = document.getElementById('excluded-ingredients-list');
        const avoidIngredientInput = document.getElementById('avoid-ingredient');

        // Hàm thêm thực phẩm vào danh sách loại trừ
        function addExcludedIngredient() {
            const selectedValue = ingredientSelector.value;
            const selectedText = ingredientSelector.options[ingredientSelector.selectedIndex].text;

            if (!selectedValue) {
                alert("Vui lòng chọn một thực phẩm để loại trừ!");
                return;
            }

            // Kiểm tra xem thực phẩm đã được chọn hay chưa
            const existingItem = excludedIngredientsList.querySelector(`[data-id="${selectedValue}"]`);
            if (existingItem) {
                alert("Thực phẩm này đã được thêm vào danh sách loại trừ!");
                return;
            }

            // Tạo và thêm thực phẩm vào danh sách hiển thị
            createExcludedIngredientItem(selectedValue, selectedText);
        }

        // Hàm tạo và thêm phần tử thực phẩm loại trừ
        function createExcludedIngredientItem(id, name) {
            const item = document.createElement('div');
            item.className = 'excluded-item';
            item.dataset.id = id;
            item.textContent = name;

            // Nút xóa cho từng thành phần
            const removeButton = document.createElement('button');
            removeButton.textContent = "❌";
            removeButton.className = "remove-ingredient-button";

            // Gắn sự kiện xóa
            removeButton.addEventListener('click', function () {
                item.remove();
                updateAvoidIngredient();
            });

            item.appendChild(removeButton);
            excludedIngredientsList.appendChild(item);

            // Cập nhật giá trị AvoidIngredient
            updateAvoidIngredient();
        }

        // Hàm cập nhật giá trị AvoidIngredient
        function updateAvoidIngredient() {
            const selectedIds = Array.from(excludedIngredientsList.children).map(item => item.dataset.id);
            avoidIngredientInput.value = selectedIds.join(';');
        }

        // Gắn sự kiện cho nút thêm
        addIngredientButton.addEventListener('click', addExcludedIngredient);

        // Gắn sự kiện cho các thực phẩm đã được tải từ server
        Array.from(excludedIngredientsList.children).forEach(item => {
            const removeButton = item.querySelector('.remove-ingredient-button');
            if (removeButton) {
                removeButton.addEventListener('click', function () {
                    item.remove();
                    updateAvoidIngredient();
                });
            }
        });
        // Cập nhật giá trị AvoidIngredient ban đầu
        updateAvoidIngredient();
    });



    </script>


