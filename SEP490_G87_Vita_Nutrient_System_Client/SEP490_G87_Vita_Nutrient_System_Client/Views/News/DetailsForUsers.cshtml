@model SEP490_G87_Vita_Nutrient_System_Client.Models.ArticlesNewsDTO
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap">
<link rel="stylesheet" href="/css/news/detailsForUsers.css" />

<div class="container">
    <div class="header-section">
        <h2 class="page-title">@Model.Title</h2>
        <div class="row details-row">
            <div class="col-sm-6">
                <strong>Tác giả:</strong> @Model.NameCreater
            </div>
            <div class="col-sm-6 text-right">
                <strong>Ngày tạo:</strong> @Model.DateCreated?.ToString("dd/MM/yyyy")
            </div>
        </div>
    </div>

    <div class="content-section">
        <dd class="col-sm-12">
            @Html.Raw(Model.Content)
        </dd>
    </div>
    <hr />
    <div class="rating-section">
        <h4>Đánh giá bài viết</h4>
        @if (User.Identity.IsAuthenticated)
        {
            <div class="star-rating">
                <input type="radio" id="star5" name="rating" value="5" onclick="submitRating(5)" />
                <label for="star5" title="5 sao"><i class="fa fa-star"></i></label>
                <input type="radio" id="star4" name="rating" value="4" onclick="submitRating(4)" />
                <label for="star4" title="4 sao"><i class="fa fa-star"></i></label>
                <input type="radio" id="star3" name="rating" value="3" onclick="submitRating(3)" />
                <label for="star3" title="3 sao"><i class="fa fa-star"></i></label>
                <input type="radio" id="star2" name="rating" value="2" onclick="submitRating(2)" />
                <label for="star2" title="2 sao"><i class="fa fa-star"></i></label>
                <input type="radio" id="star1" name="rating" value="1" onclick="submitRating(1)" />
                <label for="star1" title="1 sao"><i class="fa fa-star"></i></label>
            </div>
            
        }
        <p id="rating-display">@Model.Rate?.ToString("0.00")/5 - (@Model.NumberRate bình chọn)</p>
    </div>

    <div class="action-links text-right">
        <a asp-action="IndexForUsers" class="btn btn-secondary">Quay lại danh sách</a>
    </div>

    <!-- Modal Xác Nhận -->
    <div id="confirmModal" class="modal">
        <div class="modal-content">
            <p>Bạn có chắc chắn muốn sửa đánh giá của mình không?</p>
            <div class="modal-actions">
                <button id="confirmBtn" class="btn btn-primary">Có</button>
                <button id="cancelBtn" class="btn btn-secondary">Không</button>
            </div>
        </div>
    </div>


</div>
<script>
    const apiBaseUrl = '@ViewData["ApiBaseUrl"]';
    let selectedRating = 0; // Biến để lưu giá trị đánh giá người dùng chọn

    // Hiển thị modal xác nhận
    function submitRating(rating) {
        selectedRating = rating; // Lưu giá trị đánh giá
        document.getElementById('confirmModal').style.display = 'flex'; // Hiển thị modal
    }

    // Xử lý khi nhấp vào nút "Có" (xác nhận)
    document.getElementById('confirmBtn').addEventListener('click', async () => {
        const articleId = @Model.Id;
        const userId = @User.FindFirst("UserId")?.Value;

        const evaluationDto = {
            ArticlesNewsId: articleId,
            UserId: parseInt(userId),
            Ratting: selectedRating
        };

        try {
            const response = await fetch(`${apiBaseUrl}/news/${articleId}/evaluations`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(evaluationDto)
            });

            if (response.ok) {
                updateRatingDisplay(selectedRating);
                location.reload(); // Tải lại trang để làm mới dữ liệu
            } else {
                const errorText = await response.text();
                alert(`Lỗi khi gửi đánh giá: ${errorText}`);
            }
        } catch (error) {
            console.error("Error:", error);
            alert("Lỗi khi gửi đánh giá.");
        }

        document.getElementById('confirmModal').style.display = 'none'; // Ẩn modal sau khi hoàn tất
    });

    // Xử lý khi nhấp vào nút "Không" (hủy bỏ)
    document.getElementById('cancelBtn').addEventListener('click', () => {
        document.getElementById('confirmModal').style.display = 'none'; // Ẩn modal
    });


    function updateRatingDisplay(rating) {
        const rateDisplay = document.getElementById('rating-display');
        let currentRate = parseFloat("@Model.Rate") || 0;
        let currentVotes = parseInt("@Model.NumberRate") || 0;

        // Cập nhật điểm trung bình và số lượt bình chọn
        currentRate = ((currentRate * currentVotes) + rating) / (currentVotes + 1);
        currentVotes += 1;

        // Cập nhật hiển thị đánh giá
        rateDisplay.textContent = `${currentRate.toFixed(2)}/5 - (${currentVotes} bình chọn)`;
    }

    
</script>

