<link rel="stylesheet" href="/css/userPhysicalStatistics.css" />
@model SEP490_G87_Vita_Nutrient_System_Client.Models.UserPhysicalStatistics

@{
    ViewData["Title"] = "Thông tin cá nhân";
}

<div class="container">
    <h2 class="title">Thông tin thể chất và bệnh lý</h2>

    <form asp-action="UserPhysicalStatistics" method="post" class="personal-info-form" id="userInfoForm">
        @Html.AntiForgeryToken()
        <div class="form-group row">
            <label for="Gender" class="col-label">Giới tính:</label>
            <div class="col-input">
                <select asp-for="Gender" class="form-control">
                    <option value="true">Nam giới</option>
                    <option value="false">Nữ giới</option>
                </select>
            </div>
        </div>

        <div class="form-group">
            <label for="Height" class="col-label">Chiều cao(cm):</label>
            <div class="col-input">
                <input asp-for="Height" class="form-control"
                       oninvalid="this.setCustomValidity('Vui lòng nhập chiều cao từ 50 cm đến 250 cm.')"
                       oninput="this.setCustomValidity('')"
                       title="Vui lòng nhập chiều cao từ 50 cm đến 250 cm."
                       min="50" max="250" required />
            </div>
        </div>

        <div class="form-group">
            <label for="Weight" class="col-label">Cân nặng(kg):</label>
            <div class="col-input">
                <input asp-for="Weight" class="form-control"
                       oninvalid="this.setCustomValidity('Vui lòng nhập cân nặng từ 10 kg đến 300 kg.')"
                       oninput="this.setCustomValidity('')"
                       title="Vui lòng nhập cân nặng từ 10 kg đến 300 kg."
                       min="10" max="300" required />
            </div>
        </div>

        <div class="form-group">
            <label for="Age" class="col-label">Tuổi:</label>
            <div class="col-input">
                <input asp-for="Age" class="form-control"
                       oninvalid="this.setCustomValidity('Chỉ hỗ trợ nhập tuổi từ 5 đến 100.')"
                       oninput="this.setCustomValidity('')"
                       title="Chỉ hỗ trợ nhập tuổi từ 5 đến 100."
                       min="5" max="100" required />
            </div>
        </div>

        <div class="form-group row">
            <label for="ActivityLevel" class="col-label">Mức độ hoạt động:</label>
            <div class="col-input">
                <select asp-for="ActivityLevel" class="form-control">
                    <option value="1.2">Công việc bàn giấy, tập thể dục nhẹ</option>
                    <option value="1.375">Hoạt động nhẹ nhàng, tập luyện 1-3 lần/tuần</option>
                    <option value="1.55">Tập thể dục thường xuyên, 3-5 lần/tuần</option>
                    <option value="1.725">Tập nhiều, 6-7 lần/tuần</option>
                    <option value="1.9">Tập cường độ cao, công việc nặng</option>
                </select>
            </div>
        </div>

        <div class="form-group row">
            <label for="underlyingDiseaseInput" class="col-label">Bệnh lý:</label>
            <div class="col-sm-9">
                <div id="currentDiseasesContainer">
                    @if (Model.UnderlyingDiseaseNames != null && Model.UnderlyingDiseaseNames.Any())
                    {
                        foreach (var disease in ViewBag.Diseases as List<SEP490_G87_Vita_Nutrient_System_Client.Models.ListOfDisease>)
                        {
                            if (Model.UnderlyingDiseaseNames.Contains(disease.Name))
                            {
                                <span class="badge bg-primary disease-badge" data-id="@disease.Id" data-name="@disease.Name">
                                    @disease.Name
                                    <button type="button" class="btn-close btn-close-white btn-sm remove-disease-btn"></button>

                                </span>
                            }
                        }
                    }
                    else
                    {
                        <span id="noDiseasesText">Không có bệnh lý nào được ghi nhận.</span>
                    }
                </div>

            </div>
        </div>

        <div class="form-group row">
            <label for="diseaseSelect" class="col-label">Thêm bệnh lý:</label>
            <div class="col-sm-12 d-flex align-items-center">
                <select id="diseaseSelect" class="form-control me-2" style="flex: 1;">
                    @if (ViewBag.Diseases != null)
                    {
                        foreach (var disease in ViewBag.Diseases as List<SEP490_G87_Vita_Nutrient_System_Client.Models.ListOfDisease>)
                        {
                            <option value="@disease.Id">@disease.Name</option>
                        }
                    }
                </select>
                <button type="button" class="btn btn-success btn-sm" id="addDiseaseBtn">Thêm</button>
            </div>
            <!-- Input ẩn UserId -->
            <input type="hidden" name="uid" value="@Model.UserId" />

        </div>



        <div class="form-group row">
            <div class="col-label"></div>
            <div class="col-input">
                <!-- Nút để mở modal -->
                <button type="button" class="btn btn-primary" onclick="showNutritionalGoals()">Cập nhật mục tiêu dinh dưỡng</button>
            </div>
        </div>
        <div id="successMessage" class="alert alert-success" style="display:none;"></div>
        <div id="errorMessage" class="alert alert-danger" style="display:none;"></div>
    </form>
</div>

<!-- Modal cho bảng "Mục tiêu dinh dưỡng của tôi" -->
<div id="nutritionalGoalsModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h3>Cập nhật mục tiêu dinh dưỡng</h3>
        <p>Lượng Calo: <span id="caloriesValue"></span> calo</p>
        <ul>
            <li><span class="dot yellow"></span> ~ <span id="carbsValue"></span>g (40%) Carbs</li>
            <li><span class="dot blue"></span> ~ <span id="fatsValue"></span>g (30%) Chất béo</li>
            <li><span class="dot purple"></span> ~ <span id="proteinsValue"></span>g (30%) Protein</li>
        </ul>
        <button type="button" class="btn btn-primary" onclick="submitForm()">Lưu</button>
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", () => {
        const userId = document.querySelector("input[name='uid']").value;

        // Sự kiện khi nhấn nút "Thêm bệnh lý"
        document.getElementById("addDiseaseBtn").addEventListener("click", () => {
            const diseaseId = document.getElementById("diseaseSelect").value;
            const diseaseName = document.getElementById("diseaseSelect").selectedOptions[0].textContent;

            if (!diseaseId || !userId) {
                alert("Vui lòng chọn bệnh và đảm bảo User ID hợp lệ.");
                return;
            }

            fetch(`/NutritionRoute/AddDisease`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ userId, diseaseId })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Thêm bệnh lý vào danh sách
                        const container = document.getElementById("currentDiseasesContainer");
                        const newBadge = document.createElement("span");
                        newBadge.className = "badge bg-primary disease-badge";
                        newBadge.dataset.name = diseaseName;
                        newBadge.innerHTML = `
                            <span>${diseaseName}</span>
                            <button type="button" class="btn-close remove-disease-btn"></button>
                        `;
                        container.appendChild(newBadge);

                        // Xóa thông báo "Không có bệnh lý"
                        const noDiseasesText = document.getElementById("noDiseasesText");
                        if (noDiseasesText) noDiseasesText.remove();

                        // Gắn sự kiện xóa cho nút mới
                        setupRemoveDiseaseButton(newBadge.querySelector(".remove-disease-btn"));

                        //alert("Thêm bệnh lý thành công!");
                    } else {
                        alert(data.message || "Có lỗi xảy ra khi thêm bệnh lý.");
                    }
                })
                .catch(() => alert("Có lỗi xảy ra khi kết nối với server."));
        });

        // Xử lý xóa bệnh lý
        function setupRemoveDiseaseButton(button) {
            button.addEventListener("click", () => {
                const diseaseBadge = button.closest(".disease-badge");
                const diseaseId = diseaseBadge.dataset.id;
                const userId = document.querySelector("input[name='uid']").value;

                console.log("User ID:", userId);
                console.log("Disease ID:", diseaseId);

                if (!userId || !diseaseId) {
                    alert("User ID hoặc Disease ID không hợp lệ.");
                    return;
                }

                fetch(`/NutritionRoute/DeleteDisease`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "RequestVerificationToken": document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ userId, diseaseId })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            diseaseBadge.remove();

                            // Nếu không còn bệnh, hiển thị "Không có bệnh lý"
                            const container = document.getElementById("currentDiseasesContainer");
                            if (!container.querySelector(".disease-badge")) {
                                container.innerHTML = '<span id="noDiseasesText">Không có bệnh lý nào được ghi nhận.</span>';
                            }

                            //alert("Xóa bệnh lý thành công!");
                        } else {
                            alert(data.message || "Có lỗi xảy ra khi xóa bệnh lý.");
                        }
                    })
                    .catch(() => alert("Có lỗi xảy ra khi kết nối với server."));
            });
        }

        // Gắn sự kiện xóa cho các nút xóa hiện có
        document.querySelectorAll(".remove-disease-btn").forEach(button => {
            setupRemoveDiseaseButton(button);
        });
    });


    // Thêm sự kiện `blur` để kiểm tra từng trường nhập khi người dùng rời khỏi input
    document.querySelectorAll(".form-control").forEach((input) => {
        input.addEventListener("blur", function () {
            validateInput(this); // Gọi hàm kiểm tra khi rời khỏi trường nhập
        });
    });

    // Hàm kiểm tra giá trị của từng trường nhập
    function validateInput(input) {
        const inputName = input.getAttribute("name"); // Lấy tên trường nhập
        const value = parseFloat(input.value) || 0; // Lấy giá trị nhập, mặc định là 0 nếu không có

        // Kiểm tra từng trường dựa vào tên
        if (inputName === "Height") {
            if (value < 50 || value > 250) {
                input.setCustomValidity("Vui lòng nhập chiều cao từ 50 cm đến 250 cm.");
                input.reportValidity(); // Hiển thị tooltip lỗi
                input.classList.add("invalid"); // Thêm class invalid
            } else {
                input.setCustomValidity(""); // Xóa lỗi nếu hợp lệ
                input.classList.remove("invalid");
            }
        }

        if (inputName === "Weight") {
            if (value < 10 || value > 300) {
                input.setCustomValidity("Vui lòng nhập cân nặng từ 10 kg đến 300 kg.");
                input.reportValidity(); // Hiển thị tooltip lỗi
                input.classList.add("invalid");
            } else {
                input.setCustomValidity("");
                input.classList.remove("invalid");
            }
        }

        if (inputName === "Age") {
            if (value < 5 || value > 100) {
                input.setCustomValidity("Chỉ hỗ trợ nhập tuổi từ 5 đến 100.");
                input.reportValidity(); // Hiển thị tooltip lỗi
                input.classList.add("invalid");
            } else {
                input.setCustomValidity("");
                input.classList.remove("invalid");
            }
        }
    }

    // Hàm khi nhấn nút "Cập nhật mục tiêu"
    function showNutritionalGoals() {
        const inputs = document.querySelectorAll(".form-control");
        let hasError = false;

        // Kiểm tra lại toàn bộ input khi nhấn nút
        inputs.forEach((input) => {
            validateInput(input);
            if (input.classList.contains("invalid")) {
                hasError = true; // Đánh dấu nếu có lỗi
            }
        });

        // Nếu có lỗi, không thực hiện tiếp
        if (hasError) return;

        // Nếu không có lỗi, tính toán mục tiêu
        const height = parseFloat(document.querySelector('input[name="Height"]').value);
        const weight = parseFloat(document.querySelector('input[name="Weight"]').value);
        const age = parseFloat(document.querySelector('input[name="Age"]').value);
        const gender = document.querySelector('select[name="Gender"]').value === "true";
        const activityLevel = parseFloat(document.querySelector('select[name="ActivityLevel"]').value) || 1.2;

        let bmr = gender
            ? (10 * weight) + (6.25 * height) - (5 * age) + 5
            : (10 * weight) + (6.25 * height) - (5 * age) - 161;

        let tdee = bmr * activityLevel;

        const carbs = Math.round(tdee * 0.4 / 4);
        const fats = Math.round(tdee * 0.3 / 9);
        const proteins = Math.round(tdee * 0.3 / 4);

        document.getElementById("caloriesValue").textContent = Math.round(tdee);
        document.getElementById("carbsValue").textContent = carbs;
        document.getElementById("fatsValue").textContent = fats;
        document.getElementById("proteinsValue").textContent = proteins;

        // Hiển thị bảng modal
        document.getElementById("nutritionalGoalsModal").style.display = "block";
    }




    function closeModal() {
        document.getElementById("nutritionalGoalsModal").style.display = "none";
    }

      function submitForm() {
        closeModal();
        $.ajax({
            url: '@Url.Action("UserPhysicalStatistics", "User")',
            type: 'POST',
            data: {
                Gender: $("#Gender").val(),
                Height: $("#Height").val(),
                Weight: $("#Weight").val(),
                Age: $("#Age").val(),
                ActivityLevel: $("#ActivityLevel").val(),
                UnderlyingDisease: $("UnderlyingDisease").val()
            },
            headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            success: function (response) {
                if (response.success) {
                    $("#successMessage").text(response.message).show();
                    $("#errorMessage").hide();
                } else {
                    $("#errorMessage").text(response.message).show();
                    $("#successMessage").hide();
                }
            },
            error: function () {
                $("#errorMessage").text("Có lỗi xảy ra trong quá trình lưu thông tin.").show();
                $("#successMessage").hide();
            }
        });

    }

</script>
