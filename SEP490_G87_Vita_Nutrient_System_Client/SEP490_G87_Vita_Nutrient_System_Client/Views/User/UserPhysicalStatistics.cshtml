<link rel="stylesheet" href="/css/userPhysicalStatistics.css" />
@model SEP490_G87_Vita_Nutrient_System_Client.Models.UserPhysicalStatistics

@{
    ViewData["Title"] = "Thông tin cá nhân";
}

<div class="container">
    <h2 class="title">Thông tin thể chất và bệnh lý</h2>

    <form asp-action="UserPhysicalStatistics" method="post" class="personal-info-form" id="userInfoForm">
        @Html.AntiForgeryToken()
        <div class="form-group row">
            <label for="Gender" class="col-label">Giới tính:</label>
            <div class="col-input">
                <select asp-for="Gender" class="form-control">
                    <option value="true">Nam giới</option>
                    <option value="false">Nữ giới</option>
                </select>
            </div>
        </div>

        <div class="form-group">
            <label for="Height" class="col-label">Chiều cao(cm):</label>
            <div class="col-input">
                <input asp-for="Height" class="form-control"
                       oninvalid="this.setCustomValidity('Vui lòng nhập chiều cao từ 50 cm đến 250 cm.')"
                       oninput="this.setCustomValidity('')"
                       title="Vui lòng nhập chiều cao từ 50 cm đến 250 cm."
                       min="50" max="250" required />
            </div>
        </div>

        <div class="form-group">
            <label for="Weight" class="col-label">Cân nặng(kg):</label>
            <div class="col-input">
                <input asp-for="Weight" class="form-control"
                       oninvalid="this.setCustomValidity('Vui lòng nhập cân nặng từ 10 kg đến 300 kg.')"
                       oninput="this.setCustomValidity('')"
                       title="Vui lòng nhập cân nặng từ 10 kg đến 300 kg."
                       min="10" max="300" required />
            </div>
        </div>

        <div class="form-group">
            <label for="Age" class="col-label">Tuổi:</label>
            <div class="col-input">
                <input asp-for="Age" class="form-control"
                       oninvalid="this.setCustomValidity('Chỉ hỗ trợ nhập tuổi từ 5 đến 100.')"
                       oninput="this.setCustomValidity('')"
                       title="Chỉ hỗ trợ nhập tuổi từ 5 đến 100."
                       min="5" max="100" required />
            </div>
        </div>

        <div class="form-group row">
            <label for="ActivityLevel" class="col-label">Mức độ hoạt động:</label>
            <div class="col-input">
                <select asp-for="ActivityLevel" class="form-control">
                    <option value="1.2">Công việc bàn giấy, tập thể dục nhẹ</option>
                    <option value="1.375">Hoạt động nhẹ nhàng, tập luyện 1-3 lần/tuần</option>
                    <option value="1.55">Tập thể dục thường xuyên, 3-5 lần/tuần</option>
                    <option value="1.725">Tập nhiều, 6-7 lần/tuần</option>
                    <option value="1.9">Tập cường độ cao, công việc nặng</option>
                </select>
            </div>
        </div>

        <div class="form-group row">
            <label for="underlyingDiseaseInput" class="col-label">Bệnh lý:</label>
            <div class="col-sm-9">
                <input type="text" class="form-control user-info-input" id="underlyingDiseaseInput"
                       placeholder="Bệnh lý"
                       value="@string.Join(", ", Model.UnderlyingDiseaseNames ?? new List<string> { "Không có bệnh lý nào được ghi nhận" })"
                       readonly>
            </div>
            <div class="col-sm-3">
                <button type="button" class="btn btn-primary btn-sm manage-disease-btn"
                        data-bs-toggle="modal"
                        data-bs-target="#diseaseModal">
                    Quản lý Bệnh Lý
                </button>
            </div>
        </div>


        <div class="form-group row">
            <div class="col-label"></div>
            <div class="col-input">
                <!-- Nút để mở modal -->
                <button type="button" class="btn btn-primary" onclick="showNutritionalGoals()">Cập nhật mục tiêu dinh dưỡng</button>
            </div>
        </div>
        <div id="successMessage" class="alert alert-success" style="display:none;"></div>
        <div id="errorMessage" class="alert alert-danger" style="display:none;"></div>
    </form>
</div>

<!-- Modal cho bảng "Mục tiêu dinh dưỡng của tôi" -->
<div id="nutritionalGoalsModal" class="modal">
    <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h3>Cập nhật mục tiêu dinh dưỡng</h3>
        <p>Lượng Calo: <span id="caloriesValue"></span> calo</p>
        <ul>
            <li><span class="dot yellow"></span> ~ <span id="carbsValue"></span>g (40%) Carbs</li>
            <li><span class="dot blue"></span> ~ <span id="fatsValue"></span>g (30%) Chất béo</li>
            <li><span class="dot purple"></span> ~ <span id="proteinsValue"></span>g (30%) Protein</li>
        </ul>
        <button type="button" class="btn btn-primary" onclick="submitForm()">Lưu</button>
    </div>
</div>


<!-- Modal Quản lý Bệnh Lý -->
<div class="modal fade" id="diseaseModal" tabindex="-1" aria-labelledby="diseaseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title fw-bold" id="diseaseModalLabel">Quản lý Bệnh Lý</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Khu vực thông báo -->
                <div id="diseaseAlertMessage" class="alert alert-danger d-none"></div>

                <!-- Danh sách bệnh lý hiện tại -->
                <div class="table-responsive">
                    <table class="table custom-table align-middle">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Tên Bệnh</th>
                                <th>Mô Tả</th>
                                <th style="text-align: center;">Hành động</th>
                            </tr>
                        </thead>
                        <tbody id="currentDiseasesList">
                            <!-- Danh sách bệnh lý hiện tại sẽ được nạp -->
                        </tbody>
                    </table>
                </div>
                <hr />
                <!-- Dropdown thêm bệnh lý -->
                <div class="mb-3">
                    <label for="diseaseSelect" class="form-label fw-semibold">Thêm bệnh lý:</label>
                    <div class="d-flex align-items-center">
                        <select class="form-select me-2" id="diseaseSelect" style="flex: 3;">
                            @if (ViewBag.Diseases != null)
                            {
                                foreach (var disease in ViewBag.Diseases as List<SEP490_G87_Vita_Nutrient_System_Client.Models.ListOfDisease>)
                                {
                                    <option value="@disease.Id">@disease.Name</option>
                                }
                            }
                        </select>
                        <button type="button" class="btn btn-success" id="addDiseaseBtn" style="flex: 1; max-width: 100px;">Thêm</button>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="saveDiseasesButton">Lưu thay đổi</button>
            </div>
        </div>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function () {
        const diseases = @Html.Raw(Json.Serialize(ViewBag.Diseases ?? new List<object>()));
        const userDiseases = @Html.Raw(Json.Serialize(Model.UnderlyingDiseaseNames ?? new List<string>()));

        const currentDiseasesList = document.getElementById('currentDiseasesList');
        const diseaseSelect = document.getElementById('diseaseSelect');
        const saveDiseasesButton = document.getElementById('saveDiseasesButton');
        const addDiseaseBtn = document.getElementById('addDiseaseBtn');

        function loadCurrentDiseases() {
            currentDiseasesList.innerHTML = '';
            userDiseases.forEach((disease, index) => {
                const diseaseData = diseases.find(d => d.Name === disease);
                if (diseaseData) {
                    currentDiseasesList.innerHTML += `
                        <tr>
                            <td>${index + 1}</td>
                            <td>${diseaseData.Name}</td>
                            <td>${diseaseData.Describe}</td>
                            <td style="text-align: center;">
                                <button class="btn btn-danger btn-sm remove-disease-btn" data-id="${diseaseData.Id}">Xóa</button>
                            </td>
                        </tr>
                    `;
                }
            });
        }

        function loadDiseaseDropdown() {
            diseaseSelect.innerHTML = '';
            diseases.forEach(disease => {
                const option = document.createElement('option');
                option.value = disease.Id;
                option.textContent = disease.Name;
                diseaseSelect.appendChild(option);
            });
        }

        addDiseaseBtn.addEventListener('click', function () {
            const selectedId = diseaseSelect.value;
            const selectedDisease = diseases.find(d => d.Id == selectedId);
            if (selectedDisease && !userDiseases.includes(selectedDisease.Name)) {
                userDiseases.push(selectedDisease.Name);
                loadCurrentDiseases();
            }
        });

        currentDiseasesList.addEventListener('click', function (e) {
            if (e.target.classList.contains('remove-disease-btn')) {
                const diseaseId = e.target.getAttribute('data-id');
                const diseaseName = diseases.find(d => d.Id == diseaseId).Name;
                const index = userDiseases.indexOf(diseaseName);
                if (index > -1) {
                    userDiseases.splice(index, 1);
                    loadCurrentDiseases();
                }
            }
        });

        saveDiseasesButton.addEventListener('click', function () {
            const selectedDiseases = diseases
                .filter(disease => userDiseases.includes(disease.Name))
                .map(disease => disease.Id)
                .join(';');

            fetch('/UserPhysicalStatistics', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    UserId: @Model.UserId,
                    Gender: @Model.Gender?.ToString(),
                    Height: @Model.Height,
                    Weight: @Model.Weight,
                    Age: @Model.Age,
                    ActivityLevel: @Model.ActivityLevel,
                    UnderlyingDisease: selectedDiseases
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert('Cập nhật bệnh lý thành công!');
                        location.reload();
                    } else {
                        alert('Có lỗi xảy ra: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Có lỗi xảy ra trong quá trình cập nhật.');
                });
        });

        loadCurrentDiseases();
        loadDiseaseDropdown();
    });

</script>

<script>
    
    // Thêm sự kiện `blur` để kiểm tra từng trường nhập khi người dùng rời khỏi input
    document.querySelectorAll(".form-control").forEach((input) => {
        input.addEventListener("blur", function () {
            validateInput(this); // Gọi hàm kiểm tra khi rời khỏi trường nhập
        });
    });

    // Hàm kiểm tra giá trị của từng trường nhập
    function validateInput(input) {
        const inputName = input.getAttribute("name"); // Lấy tên trường nhập
        const value = parseFloat(input.value) || 0; // Lấy giá trị nhập, mặc định là 0 nếu không có

        // Kiểm tra từng trường dựa vào tên
        if (inputName === "Height") {
            if (value < 50 || value > 250) {
                input.setCustomValidity("Vui lòng nhập chiều cao từ 50 cm đến 250 cm.");
                input.reportValidity(); // Hiển thị tooltip lỗi
                input.classList.add("invalid"); // Thêm class invalid
            } else {
                input.setCustomValidity(""); // Xóa lỗi nếu hợp lệ
                input.classList.remove("invalid");
            }
        }

        if (inputName === "Weight") {
            if (value < 10 || value > 300) {
                input.setCustomValidity("Vui lòng nhập cân nặng từ 10 kg đến 300 kg.");
                input.reportValidity(); // Hiển thị tooltip lỗi
                input.classList.add("invalid");
            } else {
                input.setCustomValidity("");
                input.classList.remove("invalid");
            }
        }

        if (inputName === "Age") {
            if (value < 5 || value > 100) {
                input.setCustomValidity("Chỉ hỗ trợ nhập tuổi từ 5 đến 100.");
                input.reportValidity(); // Hiển thị tooltip lỗi
                input.classList.add("invalid");
            } else {
                input.setCustomValidity("");
                input.classList.remove("invalid");
            }
        }
    }

    // Hàm khi nhấn nút "Cập nhật mục tiêu"
    function showNutritionalGoals() {
        const inputs = document.querySelectorAll(".form-control");
        let hasError = false;

        // Kiểm tra lại toàn bộ input khi nhấn nút
        inputs.forEach((input) => {
            validateInput(input);
            if (input.classList.contains("invalid")) {
                hasError = true; // Đánh dấu nếu có lỗi
            }
        });

        // Nếu có lỗi, không thực hiện tiếp
        if (hasError) return;

        // Nếu không có lỗi, tính toán mục tiêu
        const height = parseFloat(document.querySelector('input[name="Height"]').value);
        const weight = parseFloat(document.querySelector('input[name="Weight"]').value);
        const age = parseFloat(document.querySelector('input[name="Age"]').value);
        const gender = document.querySelector('select[name="Gender"]').value === "true";
        const activityLevel = parseFloat(document.querySelector('select[name="ActivityLevel"]').value) || 1.2;

        let bmr = gender
            ? (10 * weight) + (6.25 * height) - (5 * age) + 5
            : (10 * weight) + (6.25 * height) - (5 * age) - 161;

        let tdee = bmr * activityLevel;

        const carbs = Math.round(tdee * 0.4 / 4);
        const fats = Math.round(tdee * 0.3 / 9);
        const proteins = Math.round(tdee * 0.3 / 4);

        document.getElementById("caloriesValue").textContent = Math.round(tdee);
        document.getElementById("carbsValue").textContent = carbs;
        document.getElementById("fatsValue").textContent = fats;
        document.getElementById("proteinsValue").textContent = proteins;

        // Hiển thị bảng modal
        document.getElementById("nutritionalGoalsModal").style.display = "block";
    }




    function closeModal() {
        document.getElementById("nutritionalGoalsModal").style.display = "none";
    }

      function submitForm() {
        closeModal();
        $.ajax({
            url: '@Url.Action("UserPhysicalStatistics", "User")',
            type: 'POST',
            data: {
                Gender: $("#Gender").val(),
                Height: $("#Height").val(),
                Weight: $("#Weight").val(),
                Age: $("#Age").val(),
                ActivityLevel: $("#ActivityLevel").val(),
                UnderlyingDisease: $("UnderlyingDisease").val()
            },
            headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            success: function (response) {
                if (response.success) {
                    $("#successMessage").text(response.message).show();
                    $("#errorMessage").hide();
                } else {
                    $("#errorMessage").text(response.message).show();
                    $("#successMessage").hide();
                }
            },
            error: function () {
                $("#errorMessage").text("Có lỗi xảy ra trong quá trình lưu thông tin.").show();
                $("#successMessage").hide();
            }
        });

    }

</script>
