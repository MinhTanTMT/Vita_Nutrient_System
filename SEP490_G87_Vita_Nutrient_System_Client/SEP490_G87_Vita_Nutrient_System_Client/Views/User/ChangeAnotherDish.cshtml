@model DataFoodListMealOfTheDay

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@Model.NameSlotOfTheDay</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
        <style>
        .highlight {
            background-color: #374151; /* Màu sáng hơn cho hàng khi được nhấn */
        }
    </style>
</head>
<body class="bg-pink-100 text-gray-900 font-sans">

    <div class="container mx-auto p-6">
        <!-- Header Section -->
        <div class="flex items-center mb-6">
            <h1 class="text-2xl font-bold text-gray-800">@Model.NameSlotOfTheDay</h1>
            <div class="ml-4 flex items-center space-x-2 text-gray-500">
                <span class="text-sm">Danh sách món theo bữa</span>
@*                 <span>|</span>
                <span class="text-sm">Simple</span>
                <span>|</span>
                <span class="text-sm">Breakfast</span> 
                <a href="#" class="text-blue-500 underline ml-2">Edit</a> *@
            </div>
            <div class="ml-auto text-orange-500 font-bold text-lg">458 Calo</div>
        </div>


        @{
            List<int> listFoodId = new List<int>();
            @if (Model.foodIdData != null && Model.foodIdData.Length > 0)
            {
                // Khởi tạo danh sách ID trong Razor


                @foreach (var food in Model.foodIdData)
                {
                    // Thêm từng foodId vào danh sách
                    listFoodId.Add(food.idFood);
                }

                // Chuyển đổi danh sách listFoodId thành JSON để sử dụng trong JavaScript
                
            }
            else
            {
                // Xử lý khi Model.foodIdData là null hoặc rỗng (nếu cần)
            }

            var jsonListFoodId = System.Text.Json.JsonSerializer.Serialize(listFoodId);

        }


        <div class="space-y-4 mb-8 w-1/2">
            <!-- Nút "Entire meal" -->
            <button id="btnEntireMeal" class="flex items-center w-full bg-gray-700 text-white p-4 rounded-lg"
                    onclick="highlightButton('btnEntireMeal'); changeAllTheDishesCurrentMeal(@jsonListFoodId, @Model.SettingDetail)">
                <i class="fas fa-expand-arrows-alt cursor-pointer mr-4"></i>
                <span class="flex-grow text-left">Toàn bộ bữa ăn</span>
            </button>

            <!-- Các nút món ăn -->
            @if (Model.foodIdData != null && Model.foodIdData.Length > 0)
            {
                var index = 0; // Sử dụng biến index để tạo id duy nhất
                foreach (var food in Model.foodIdData)
                {
                    <button id="btnFood@food.foodData.FoodListId_@index" class="flex items-center w-full bg-gray-700 text-white p-4 rounded-lg"
                            onclick="highlightButton('btnFood@food.foodData.FoodListId_@index'); changeOneDishCurrentMeal(@jsonListFoodId, @food.foodData.FoodListId, @food.positionFood, @Model.SettingDetail)">
                        <i class="fas fa-expand-arrows-alt cursor-pointer mr-4"></i>
                        <img src="~/images/@food.foodData.Urlimage" alt="@food.foodData.Name" class="w-10 h-10 rounded mr-4">
                        <span class="flex-grow text-left">@food.foodData.Name</span>
                        <span>@food.foodData.Describe</span>
                    </button>
                    index++;
                }
            }
            else
            {
                <p class="text-center text-red-500">Không tìm được món phù hợp</p>
            }
        </div>

        <!-- Tabs Section -->
        <div class="flex space-x-4 mb-4">
            <button id="btn1" class="text-orange-500 font-semibold" onclick="loadFoodType(0, 'btn1')">Đề xuất</button>
            <button id="btn2" class="text-gray-500" onclick="loadFoodType(1, 'btn2')">Thích</button>
            <button id="btn3" class="text-gray-500" onclick="loadFoodType(2, 'btn3')">Bộ sưu tập</button>
@*             <button id="btn4" class="text-gray-500" onclick="loadFoodType(3, 'btn4')">Recent</button> *@
        </div>

        <!-- Suggestions Section -->
        <div class="grid grid-cols-4 gap-4" id="ListFoodDiv">

        </div>


        <!-- Show More Button -->
@*         <div class="flex justify-center mt-6">
            <button class="text-gray-500 text-sm flex items-center">
                <i class="fas fa-angle-down mr-1"></i> Show More
            </button>
        </div> *@
    </div>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js" integrity="sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>


    
<script>
        let suggestedLoadFoodType = 1;

        let selectedItems = []; // Khởi tạo biến toàn cục

        function loadFoodType(type, buttonId) {
            // Cập nhật giá trị của suggestedLoadFoodType
            suggestedLoadFoodType = type;

            // Đặt tất cả các nút về class "text-gray-500"
            const buttons = document.querySelectorAll('.flex button');
            buttons.forEach(button => {
                button.classList.remove('text-orange-500', 'font-semibold');
                button.classList.add('text-gray-500');
            });

            // Đổi class của nút được nhấn thành "text-orange-500 font-semibold"
            const activeButton = document.getElementById(buttonId);
            activeButton.classList.remove('text-gray-500');
            activeButton.classList.add('text-orange-500', 'font-semibold');

            console.log(`Selected food type: ${suggestedLoadFoodType}`);
            // Bạn có thể thêm các hành động khác khi food type được thay đổi
        }

        function highlightButton(buttonId) {
            // Đặt lại tất cả các nút về trạng thái mặc định
            const buttons = document.querySelectorAll('.space-y-4 button');
            buttons.forEach(button => {
                button.classList.remove('bg-blue-300', 'text-black'); // Xóa class làm nổi bật
                button.classList.add('bg-gray-700', 'text-white'); // Đặt lại class mặc định
            });

            // Thêm class nổi bật cho nút được nhấn
            const activeButton = document.getElementById(buttonId);
            if (activeButton) {
                activeButton.classList.remove('bg-gray-700', 'text-white');
                activeButton.classList.add('bg-blue-300', 'text-black');
            } else {
                console.error('Button not found with id:', buttonId);
            }
        }


        function changeAllTheDishesCurrentMeal(jsonListFoodId, settingDetail) {
            // Xóa dữ liệu cũ trước khi load danh sách mới
            selectedItems = [];
            const apiURL = "@ViewBag.clientBaseAddress".replace(/&amp;/g, '&');
            $.ajax({
                url: apiURL + '/GenerateMeal/APICreateListOfAlternativeDishes?foodSelectionType=' + suggestedLoadFoodType,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    listIdFood: [],
                    MealSettingsDetailsId: settingDetail,
                    numberOfCreation: 30
                }),
                traditional: true,
                success: function (response) {
                    console.log("Response from server:", response);
                    var ListFoodDiv = $('#ListFoodDiv');
                    ListFoodDiv.empty();

                    $.each(response, function (index, item) {
                        // Thêm item vào mảng selectedItems mới
                        selectedItems.push(item);

                        if (item.foodIdData && item.foodIdData.length > 0) {
                            var trayDiv = $('<div class="bg-gray-700 text-white p-4 rounded-lg flex flex-col items-start"></div>');

                            $.each(item.foodIdData, function (index2, item2) {
                                var foodItem = `
                        <div class="flex items-center mb-2">
                            <img src="/images/${item2.foodData.urlimage}" alt="${item2.foodData.name}" class="w-10 h-10 object-cover rounded mr-2">
                            <div class="flex flex-col">
                                <h3 class="text-blue-400 font-semibold">${item2.foodData.name}</h3>
                                <p class="text-sm text-gray-300">1 serving</p>
                            </div>
                        </div>
                    `;
                                trayDiv.append(foodItem);
                            });

                            let totalCalories = item.foodIdData.reduce((sum, item2) => sum + item2.foodData.ingredientDetails100gDTO.energy, 0).toFixed(2);

                            trayDiv.append(`
                    <div class="flex items-center justify-between w-full mt-2">
                        <span class="text-orange-400 text-sm">${totalCalories} Calories</span>
                        <button class="bg-gray-600 text-white px-3 py-1 rounded-full text-sm" onclick="getThisListOfDishes(${index})">Chọn</button>
                    </div>
                `);
                            ListFoodDiv.append(trayDiv);
                        }
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred:", error);
                }
            });
        }


        function getThisListOfDishes(index) {
            let dataFoodListMealOfTheDay = selectedItems[index];
            const apiURL = "@ViewBag.APIgetThisListOfDishes".replace(/&amp;/g, '&');
            console.log("dataPost:", JSON.stringify(dataFoodListMealOfTheDay));
            $.ajax({
                url: apiURL,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(dataFoodListMealOfTheDay),
                success: function (response) {
                    console.log("Response from server:", response);
                    location.reload();
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred:", error);
                }
            });
        }        

        function changeOneDishCurrentMeal(jsonListFoodId, foodListId, positionFood, settingDetail) {
            jsonListFoodId.splice(positionFood, 1);
            console.log("Data jsonListFoodId:", jsonListFoodId);
            const apiURL = "@ViewBag.clientBaseAddress".replace(/&amp;/g, '&');
            $.ajax({
                url: apiURL + '/GenerateMeal/APICreateListOfAlternativeDishes?foodSelectionType=' + suggestedLoadFoodType,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    listIdFood: jsonListFoodId,
                    MealSettingsDetailsId: settingDetail,
                    numberOfCreation: 30
                }),
                traditional: true,
                success: function (response) {
                    console.log("Response from server:", response);
                    var ListFoodDiv = $('#ListFoodDiv');
                    ListFoodDiv.empty();

                    $.each(response, function (index, item) {
                        $.each(item.foodIdData, function (index2, item2) {
                            // if (item2.positionFood == positionFood) {
                                // Kiểm tra nếu món ăn chưa có trong danh sách `jsonListFoodId`
                                if (!jsonListFoodId.includes(item2.foodData.foodListId)) {
                                    var rowContent = `
                        <div class="bg-gray-700 text-white p-4 rounded-lg flex flex-col items-start">
                            <img src="/images/${item2.foodData.urlimage}" alt="${item2.foodData.name}" class="w-full h-24 object-cover rounded mb-2">
                            <h3 class="text-white font-semibold">${item2.foodData.name}</h3>
                            <p class="text-sm text-gray-300">${item2.foodData.describe}</p>
                            <div class="flex items-center justify-between w-full mt-2">
                                <span class="text-orange-400 text-sm">${parseFloat(item2.foodData.ingredientDetails100gDTO.energy).toFixed(2)} Calo</span>
                                <button class="bg-gray-600 text-white px-3 py-1 rounded-full text-sm" onclick="SelectReplaceCurrentFood(@Model.SlotOfTheDay, @Model.SettingDetail, ${foodListId}, '-', @ViewBag.userId, '@ViewBag.myDay', ${positionFood}, @Model.OrderSettingDetail, ${item2.foodData.foodListId})">Chọn</button>
                            </div>
                        </div>
                    `;
                                    ListFoodDiv.append(rowContent); // Thêm nội dung vào danh sách
                                }
                            // }
                        });
                    });
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred:", error);
                }
            });
        }

        function SelectReplaceCurrentFood(slotOfTheDay, settingDetail, idFood, statusSymbol, userId, myDay, positionFood, orderNumber, idFoodSelect) {

            const apiURL = "@ViewBag.APISelectReplaceCurrentFood".replace(/&amp;/g, '&');

            var data = {
                userId: parseInt(userId),
                myDay: formatDateToISOWithoutTimezone(myDay),
                slotOfTheDay: parseInt(slotOfTheDay),
                settingDetail: parseInt(settingDetail),
                idFood: parseInt(idFood),
                statusSymbol: statusSymbol,
                positionFood: parseInt(positionFood),
                orderNumber: parseInt(orderNumber)
            };

            $.ajax({
                url: apiURL + idFoodSelect,
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                success: function (response) {
                    console.log("Response from server:", response);
                    location.reload();
                },
                error: function (xhr, status, error) {
                    console.error("Error occurred:", error);
                }
            });
        }

        function formatDateToISOWithoutTimezone(dateString) {
            const date = new Date(dateString);

            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            const hours = String(date.getHours()).padStart(2, '0');
            const minutes = String(date.getMinutes()).padStart(2, '0');
            const seconds = String(date.getSeconds()).padStart(2, '0');

            return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}Z`;
        }



</script>




    <script src="https://kit.fontawesome.com/a076d05399.js"></script>
</body>
</html>

