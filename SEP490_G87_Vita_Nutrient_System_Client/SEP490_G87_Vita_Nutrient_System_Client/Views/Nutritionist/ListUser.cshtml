@model ApiResponse

<div class="container mt-5">
    <h2 class="text-center">User List</h2>

    <!-- Thanh Tìm Kiếm -->
    <form method="get" asp-action="ListUser" class="d-flex mb-4">
        <input type="text" name="search" value="@ViewBag.Search" placeholder="Search users..." class="form-control me-2" />
        <button type="submit" class="btn btn-primary">Search</button>
    </form>

    <!-- Bảng danh sách người dùng -->
    <table class="table table-striped table-hover">
        <thead class="table-dark">
            <tr>
                <th>Image</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Height</th>
                <th>Weight</th>
                <th>Age</th>
                <th>Premium</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model.Items)
            {
                <tr>
                    <td>
                        <img src="@user.UrlImage" alt="Image" class="rounded-circle" width="50" height="50" onerror="this.onerror=null; this.src='default-avatar.jpg';" />
                    </td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>@user.UserDetail.Height</td>
                    <td>@user.UserDetail.Weight</td>
                    <td>@user.UserDetail.Age</td>
                    <td>@(user.UserDetail.IsPremium == true ? "Yes" : "No")</td>
                    <td>
                        <button type="button" class="btn btn-success btn-sm" onclick="openUserDetailModal(@user.UserId)">Update</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <!-- Thanh phân trang -->
    <nav aria-label="Page navigation" class="d-flex justify-content-center">
        <ul class="pagination">
            @for (int i = 1; i <= ViewBag.TotalPages; i++)
            {
                <li class="page-item @(i == ViewBag.CurrentPage ? "active" : "")">
                    <a class="page-link" asp-action="ListUser" asp-route-page="@i" asp-route-pageSize="10" asp-route-search="@ViewBag.Search">@i</a>
                </li>
            }
        </ul>
    </nav>
</div>

<div class="modal fade" id="userDetailModal" tabindex="-1" aria-labelledby="userDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userDetailModalLabel">User Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center mb-3">
                    <img id="userImage" src="" alt="User Image" class="rounded-circle" width="100" height="100"/>
                </div>
                <p><strong>First Name:</strong> <span id="firstName"></span></p>
                <p><strong>Last Name:</strong> <span id="lastName"></span></p>
                <p><strong>Description:</strong> <span id="describeYourself"></span></p>
                <p><strong>Height:</strong> <span id="height"></span></p>
                <p><strong>Weight:</strong> <span id="weight"></span></p>
                <p><strong>Age:</strong> <span id="age"></span></p>
                <p><strong>Want to Improve:</strong> <span id="wantImprove"></span></p>
                <p><strong>Underlying Disease:</strong> <span id="underlyingDisease"></span></p>

                <!-- Editable fields for Info Confirm Good and Info Confirm Bad -->
                <p>
                    <strong>Info Confirm Good:</strong>
                    <span id="inforConfirmGood"></span>
                    <input type="text" id="inforConfirmGoodInput" class="form-control d-none" />
                </p>
                <p>
                    <strong>Info Confirm Bad:</strong>
                    <span id="inforConfirmBad"></span>
                    <input type="text" id="inforConfirmBadInput" class="form-control d-none" />
                </p>
                <p><strong>Is Premium:</strong> <span id="isPremium"></span></p>
            </div>
            <div class="modal-footer">
                <button type="button" id="editButton" class="btn btn-primary" onclick="enableEdit()">Edit</button>
                <button type="button" id="saveButton" class="btn btn-success d-none" onclick="saveChanges()">Save</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>



<script>
    // Cache object to store user details by userId
    const userCache = {};
    let currentUserId = null;
    async function openUserDetailModal(userId) {
        // Check if the user data is already cached
        currentUserId = userId
        if (userCache[userId]) {
            console.log("Loading from cache:", userId); // Check if cache is working
            populateModal(userCache[userId]);
            new bootstrap.Modal(document.getElementById('userDetailModal')).show();
            return; // Exit to prevent any API call
        }

        // Fetch data from API if not cached
        console.log("Fetching from API:", userId); // Confirm if API is called only once
        fetchUserData(userId);
    }

    async function fetchUserData(userId) {
        try {
            const response = await fetch(`https://localhost:7045/api/Nutrition/user-detail/${userId}`);
            if (response.ok) {
                const data = await response.json();
                userCache[userId] = data; // Cache the user data
                populateModal(data);
                new bootstrap.Modal(document.getElementById('userDetailModal')).show();
            } else {
                alert("Failed to load user details.");
            }
        } catch (error) {
            console.error("Error fetching user details:", error);
            alert("Error fetching user details.");
        }
    }

    // Populate modal fields with user data
    function populateModal(data) {
        document.getElementById('userImage').src = data.urlImage;
        document.getElementById('firstName').innerText = data.firstName || 'N/A';
        document.getElementById('lastName').innerText = data.lastName || 'N/A';
        document.getElementById('describeYourself').innerText = data.userDetail.describeYourself || 'N/A';
        document.getElementById('height').innerText = data.userDetail.height ?? 'N/A';
        document.getElementById('weight').innerText = data.userDetail.weight ?? 'N/A';
        document.getElementById('age').innerText = data.userDetail.age ?? 'N/A';
        document.getElementById('wantImprove').innerText = data.userDetail.wantImprove || 'N/A';
        document.getElementById('underlyingDisease').innerText = data.userDetail.underlyingDisease || 'N/A';
        document.getElementById('inforConfirmGood').innerText = data.userDetail.inforConfirmGood || 'N/A';
        document.getElementById('inforConfirmBad').innerText = data.userDetail.inforConfirmBad || 'N/A';
        document.getElementById('isPremium').innerText = data.userDetail.isPremium ? 'Yes' : 'No';
    }

    // Enable edit mode for Info Confirm Good and Info Confirm Bad fields
    function enableEdit() {
        document.getElementById('inforConfirmGood').classList.add('d-none');
        document.getElementById('inforConfirmBad').classList.add('d-none');
        document.getElementById('inforConfirmGoodInput').classList.remove('d-none');
        document.getElementById('inforConfirmBadInput').classList.remove('d-none');
        document.getElementById('editButton').classList.add('d-none');
        document.getElementById('saveButton').classList.remove('d-none');

        // Set input values to the current text values
        document.getElementById('inforConfirmGoodInput').value = document.getElementById('inforConfirmGood').innerText;
        document.getElementById('inforConfirmBadInput').value = document.getElementById('inforConfirmBad').innerText;
    }

    // Save changes to Info Confirm Good and Info Confirm Bad
    async function saveChanges() {
        // Get input values, ensuring they are non-null (set to empty strings if empty)
        const inforConfirmGood = document.getElementById('inforConfirmGoodInput').value.trim() || "";
        const inforConfirmBad = document.getElementById('inforConfirmBadInput').value.trim() || "";

        try {
            const response = await fetch(`https://localhost:7045/api/Nutrition/user/${currentUserId}?inforConfirmBad=${inforConfirmBad}&inforConfirmGood=${inforConfirmGood}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (response.ok) {
                const result = await response.json();
                if (result) {
                    // Update cached data and modal display
                    userCache[currentUserId].userDetail.inforConfirmGood = inforConfirmGood;
                    userCache[currentUserId].userDetail.inforConfirmBad = inforConfirmBad;
                    document.getElementById('inforConfirmGood').innerText = inforConfirmGood;
                    document.getElementById('inforConfirmBad').innerText = inforConfirmBad;

                    // Switch back to display mode
                    document.getElementById('inforConfirmGood').classList.remove('d-none');
                    document.getElementById('inforConfirmBad').classList.remove('d-none');
                    document.getElementById('inforConfirmGoodInput').classList.add('d-none');
                    document.getElementById('inforConfirmBadInput').classList.add('d-none');
                    document.getElementById('editButton').classList.remove('d-none');
                    document.getElementById('saveButton').classList.add('d-none');
                } else {
                    alert("Failed to save changes.");
                }
            } else {
                const errorData = await response.json();
                alert(`Error: ${errorData.title} - ${JSON.stringify(errorData.errors)}`);
            }
        } catch (error) {
            console.error("Error saving changes:", error);
            alert("Error saving changes.");
        }
    }


</script>


